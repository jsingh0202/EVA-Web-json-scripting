jsonData = fromJSON(file = "data\\ProjectAnalysis.json")
jsonData = fromJSON(file = "\\data\\ProjectAnalysis.json")
library(tidyverse)
library(jsonlite)
jsonData = fromJSON(file = "\\data\\ProjectAnalysis.json")
df = as.data.frame(jsonData)
jsonData = fromJSON(file = "dataProjectAnalysis.json")
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
View(df)
df <- filter(df, isLeaf == TRUE)
View(jsonData)
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
View(df)
df <- filter(df, grepl("04-05-07-01-03", code))
nested_col_names <- colnames(df)[13:ncol(df)]
nested_col_names
nested_col_names <- colnames(df)[14:ncol(df)]
nested_col_names
df_expanded <- df %>% unnest(nested_col_names)
View(df_expanded)
df_expanded <- df %>% unnest(c(nested_col_names))
df_expanded <- df %>% unnest(c(periods))
df_expanded <- df %>% unnest(periods)
nested_col_names <- colnames(df)[14:ncol(df)]
for (col in nested_col_names) {
df[[col]] <- strsplit(df[[col]], ", ")
}
expanded_df <- df %>%
unnest(all_of(nested_col_names))
View(df)
View(expanded_df)
nested_col_names <- colnames(df)[14:ncol(df)]
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
unnest(all_of(nested_col_names))
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
nested_col_names <- colnames(df)[14:ncol(df)]
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
unnest(all_of(nested_col_names))
View(expanded_df)
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ","))) %>%
unnest(all_of(nested_col_names))
View(expanded_df)
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ","))) %>%
unnest(cols = all_of(nested_col_names), names_repair = "unique")
nested_col_names <- colnames(df)[14:ncol(df)]
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
rowwise() %>%
mutate(n = length(periods)) %>%
unnest(c(periods, cost), names_repair = "unique") %>%
ungroup() %>%
select(-n)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
rowwise() %>%
mutate(n = length(periods)) %>%
unnest(c(periods, cost), names_repair = "unique") %>%
ungroup() %>%
select(-n)
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
rowwise() %>%
mutate(n = length(periods)) %>%
unnest(cols = all_of(nested_col_names), names_repair = "unique") %>%
ungroup() %>%
select(-n)
View(df_expanded)
expanded_def <- df %>% unnest_longer(periods)
View(df_expanded)
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
nested_col_names <- colnames(df)[14:ncol(df)]
expanded_def <- df %>% unnest_longer(periods)
expanded_def <- df %>% unnest_longer(c(periods))
expanded_def <- df %>% separate_rows(periods, sep = ",")
View(expanded_def)
expanded_def <- df %>% separate_rows(nested_col_names, sep = ",")
expanded_df <- df %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
separate_rows(all_of(nested_col_names), sep = ",")
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to remove trailing zeros from a string
remove_trailing_zeros <- function(x) {
# Split the string into individual elements
elements <- str_split(x, ", ")[[1]]
# Remove trailing zeros
trimmed_elements <- rev(elements)[-which(rev(elements) == "0" & seq_along(rev(elements)) <= length(elements))]
# Reassemble the string and return
return(paste(trimmed_elements, collapse = ", "))
}
dfx <- df %>%
mutate(across(all_of(nested_col_names), remove_trailing_zeros))
expanded_df <- dfx %>%
mutate(across(all_of(nested_col_names), ~ strsplit(., ", "))) %>%
separate_rows(all_of(nested_col_names), sep = ",")
View(expanded_def)
expanded_def <- df %>% separate_rows(nested_col_names, sep = ",")
expanded_def <- dfx %>% separate_rows(nested_col_names, sep = ",")
View(expanded_def)
View(dfx)
# Function to remove trailing zeros from a string
remove_trailing_zeros <- function(x) {
# Split the string into individual elements
elements <- str_split(x, ",")[[1]]
# Remove trailing zeros
trimmed_elements <- rev(elements)[-which(rev(elements) == "0" & seq_along(rev(elements)) <= length(elements))]
# Reassemble the string and return
return(paste(trimmed_elements, collapse = ","))
}
nested_col_names <- colnames(df)[14:ncol(df)]
dfx <- df %>%
mutate(across(all_of(nested_col_names), remove_trailing_zeros))
dfx <- df %>%
mutate(
across(
all_of(nested_col_names),
strsplit(., ",") %>% lapply(as.numeric)))
convert_to_list <- function(x) {
# Split the string into individual elements
elements <- str_split(x, ",")[[1]]
# Convert to numeric and return as a list
return(as.list(as.numeric(elements)))
}
df <- df %>%
mutate(across(all_of(nested_col_names), convert_to_list))
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
nested_col_names <- colnames(df)[14:ncol(df)]
convert_to_list <- function(x) {
# Split the string into individual elements
elements <- str_split(x, ",")[[1]]
# Convert to numeric and return as a list
return(as.list(as.numeric(elements)))
}
dfx <- df %>%
mutate(across(all_of(nested_col_names), convert_to_list))
dfx <- df %>%
mutate(across(all_of(c(nested_col_names)), convert_to_list))
dfx <- df %>%
mutate(across(nested_col_names, convert_to_list))
nested_col_names
dfx <- df %>%
mutate(nested_col_names, convert_to_list)
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
data_list[data_list != 0]
}
# Apply the function across multiple columns
cleaned_df <- df %>%
mutate(across(nested_col_names, clean_column))
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
data_list[data_list != 0]
}
# Apply the function to the specified columns using mutate and across
df <- df %>%
mutate(across(all_of(nested_col_names), clean_column))
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
data_list[data_list != 0]
}
# Apply the function to the specified columns using mutate and across
df <- df %>%
mutate(across(all_of(nested_col_names), clean_column))
View(clean_column)
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
# Return only non-zero values as a list
return(list(data_list[data_list != 0]))
}
# Apply the function to the specified columns using mutate and across
df <- df %>%
mutate(across(all_of(nested_col_names), ~ clean_column(.)))
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
# Return only non-zero values as a list
return(list(data_list[data_list != 0]))
}
# Apply the function to the specified columns using mutate and across
dfx <- df %>%
mutate(across(all_of(nested_col_names), ~ clean_column(.)))
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
# Return only non-zero values as a list
return(list(data_list[data_list != 0]))
}
# Apply the function to the specified columns using mutate and across
dfx <- df %>%
mutate(across(all_of(nested_col_names), ~ clean_column(.)))
View(dfx)
View(df)
library(tidyverse)
library(jsonlite)
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
# Return only non-zero values as a list
return(list(data_list[data_list != 0]))
}
# Apply the function to the specified columns using mutate and across
dfx <- df %>%
mutate(across(all_of(nested_col_names), ~ clean_column(.)))
library(tidyverse)
library(jsonlite)
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
# Function to clean a single column
clean_column <- function(col) {
data_list <- as.numeric(unlist(strsplit(col, ",")))
# Return only non-zero values as a list
return(list(data_list[data_list != 0]))
}
# Apply the function to the specified columns using mutate and across
dfx <- df %>%
mutate(across(all_of(nested_col_names), ~ clean_column(.)))
View(df)
View(dfx)
# Apply the function to the specified columns using mutate and across
dfx <- dfx %>%
mutate(across(all_of(nested_col_names), ~ unnest_longer(.)))
library(tidyverse)
library(jsonlite)
jsonData = fromJSON("data/ProjectAnalysis.json")
df = as.data.frame(jsonData)
df <- filter(df, isLeaf == "True")
df <- filter(df, grepl("04-05-07-01-03", code))
View(df)
p <- ggplot(data = df)
p <- ggplot(data = df) + geom_bar(mapping = aes(x = plannedCost,
y = parentName))
p
p <- ggplot(df, aes(parentName))
p
p <- ggplot(df, aes(parentName)) + geom_bar()
p
p <- ggplot(df, aes(x = parentName,
y = plannedCost)) + geom_bar()
p
p <- ggplot(df, aes(parentName,
plannedCost)) + geom_bar()
source("C:/Users/Jaskirat/Downloads/EVA-Web-json-scripting/evajson.r", echo=TRUE)
p <- ggplot(df, aes(parentName)) + geom_col()
p
p <- ggplot(df, aes(x = parentName,
y = plannedCost)) + geom_col()
p
p <- ggplot(df, aes(x = parentName,
y = plannedCost)) + geom_col() + facet_wrap(~parentName)
p
p <- ggplot(df, aes(x = parentName,
y = plannedCost)) + geom_col(stat="summary", fun="sum")
p
p <- ggplot(df, aes(y = parentName,
x = plannedCost)) + geom_col(stat="summary", fun="sum")
p
p <- ggplot(df, aes(y = parentName,
x = plannedCost)) + geom_col()
p
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() +
p
# Define the range of column names
nested_col_names <- colnames(df)[14:ncol(df)]
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() +
p
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col()
p
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() +
+ coord_flip()
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() +
coord_flip()
p
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous()
coord_flip()
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(y = reorder(parentName, plannedCost),
x = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(y = reorder(parentName, plannedCost),
x = plannedCost)) +
geom_col() + scale_x_continuous() +
coord_flip()
p
x
x
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(x = parentName,
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
reorder(parentName, plannedCost)
reorder(parentName, plannedCost)
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(x = reorder(parentName, sum(plannedCost)),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous()
coord_flip()
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(x = fct_reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- ggplot(df, aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- df %>%
mutate(parentName = fct_reorder(parentName, plannedCost, .fun="sun=m")) %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p <- df %>%
mutate(parentName = fct_reorder(parentName, plannedCost, .fun="sum")) %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
orderList <- aggregate(df$parentName, by=list(plannedCost=df$plannedCost), FUN=sum)
orderList <- aggregate(df$plannedCost, by=list(parentName=df$parentName), FUN=sum)
View(orderList)
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
orderList <- aggregate(df$plannedCost,
by=parentName=df$parentName,
orderList <- aggregate(df$plannedCost,
by=df$parentName,
FUN=sum)
orderList <- aggregate(df$plannedCost,
by=list(df$parentName),
FUN=sum)
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
View(orderList)
orderList <- aggregate(plannedCost = df$plannedCost,
by=list(parentName=df$parentName),
FUN=sum)
orderList <- aggregate(df$plannedCost,
by=list(parentName=df$parentName),
FUN=sum)
orderList <- aggregate(list(plannedCost=df$plannedCost),
by=list(parentName=df$parentName),
FUN=sum)
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous() +
coord_flip()
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(labels = comma) +
coord_flip()
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(labels = scales::comma) +
coord_flip()
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(labels = scales::comma) +
coord_flip() +
labs(title = "Planned Cost of Task Summaries under PCL Main Contract",
x = "Task Summaries",
y = "Planned Cost")
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(scales::dollar_format) +
coord_flip() +
labs(title = "Planned Cost of Task Summaries under PCL Main Contract",
x = "Task Summaries",
y = "Planned Cost")
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(scales::dollar_format()) +
coord_flip() +
labs(title = "Planned Cost of Task Summaries under PCL Main Contract",
x = "Task Summaries",
y = "Planned Cost")
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(labels = label_dollar()) +
coord_flip() +
labs(title = "Planned Cost of Task Summaries under PCL Main Contract",
x = "Task Summaries",
y = "Planned Cost")
p
p <- orderList %>%
ggplot(aes(x = reorder(parentName, plannedCost),
y = plannedCost)) +
geom_col() + scale_y_continuous(labels = scales::label_dollar()) +
coord_flip() +
labs(title = "Planned Cost of Task Summaries under PCL Main Contract",
x = "Task Summaries",
y = "Planned Cost")
p
